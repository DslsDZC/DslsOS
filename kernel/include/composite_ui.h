/**
 * @file composite_ui.h
 * @brief Composite User Interface (CUI) interface
 * @author DslsOS Team
 * @version 1.0
 * @date 2024
 */

#ifndef _COMPOSITE_UI_H_
#define _COMPOSITE_UI_H_

#include "dslos.h"
#include "kernel.h"

// UI modes
typedef enum _UI_MODE {
    UI_MODE_CLI,
    UI_MODE_GUI,
    UI_MODE_HYBRID,
    UI_MODE_HEADLESS,
    UI_MODE_REMOTE
} UI_MODE, *PUI_MODE;

// Window ID type
typedef ULONG WINDOW_ID, *PWINDOW_ID;

// Control ID type
typedef ULONG CONTROL_ID, *PCONTROL_ID;

// Display ID type
typedef ULONG DISPLAY_ID, *PDISPLAY_ID;

// Input device ID type
typedef ULONG INPUT_DEVICE_ID, *PINPUT_DEVICE_ID;

// Theme ID type
typedef ULONG THEME_ID, *PTHEME_ID;

// UI manager ID type
typedef ULONG UI_MANAGER_ID, *PUI_MANAGER_ID;

// Window types
typedef enum _WINDOW_TYPE {
    WINDOW_TYPE_NORMAL,
    WINDOW_TYPE_TOOL,
    WINDOW_TYPE_DIALOG,
    WINDOW_TYPE_MODAL,
    WINDOW_TYPE_POPUP,
    WINDOW_TYPE_MENU,
    WINDOW_TYPE_TOOLTIP,
    WINDOW_TYPE_SPLASH,
    WINDOW_TYPE_DESKTOP,
    WINDOW_TYPE_CONSOLE,
    WINDOW_TYPE_TERMINAL,
    WINDOW_TYPE_BROWSER,
    WINDOW_TYPE_FILE_EXPLORER,
    WINDOW_TYPE_SETTINGS,
    WINDOW_TYPE_HELP,
    WINDOW_TYPE_ABOUT,
    WINDOW_TYPE_CUSTOM
} WINDOW_TYPE, *PWINDOW_TYPE;

// Window states
typedef enum _WINDOW_STATE {
    WINDOW_STATE_CREATED,
    WINDOW_STATE_VISIBLE,
    WINDOW_STATE_HIDDEN,
    WINDOW_STATE_MINIMIZED,
    WINDOW_STATE_MAXIMIZED,
    WINDOW_STATE_FULLSCREEN,
    WINDOW_STATE_CLOSING,
    WINDOW_STATE_CLOSED,
    WINDOW_STATE_DESTROYED
} WINDOW_STATE, *PWINDOW_STATE;

// Control types
typedef enum _CONTROL_TYPE {
    CONTROL_TYPE_BUTTON,
    CONTROL_TYPE_LABEL,
    CONTROL_TYPE_TEXTBOX,
    CONTROL_TYPE_LISTBOX,
    CONTROL_TYPE_COMBOBOX,
    CONTROL_TYPE_CHECKBOX,
    CONTROL_TYPE_RADIOBUTTON,
    CONTROL_TYPE_PROGRESSBAR,
    CONTROL_TYPE_SLIDER,
    CONTROL_TYPE_TABCONTROL,
    CONTROL_TYPE_TREEVIEW,
    CONTROL_TYPE_DATAGRID,
    CONTROL_TYPE_MENUBAR,
    CONTROL_TYPE_STATUSBAR,
    CONTROL_TYPE_TOOLBAR,
    CONTROL_TYPE_SPLITTER,
    CONTROL_TYPE_PANEL,
    CONTROL_TYPE_CUSTOM
} CONTROL_TYPE, *PCONTROL_TYPE;

// Control states
typedef enum _CONTROL_STATE {
    CONTROL_STATE_CREATED,
    CONTROL_STATE_VISIBLE,
    CONTROL_STATE_HIDDEN,
    CONTROL_STATE_ENABLED,
    CONTROL_STATE_DISABLED,
    CONTROL_STATE_FOCUSED,
    CONTROL_STATE_SELECTED,
    CONTROL_STATE_HOVERED,
    CONTROL_STATE_PRESSED,
    CONTROL_STATE_DESTROYED
} CONTROL_STATE, *PCONTROL_STATE;

// Display types
typedef enum _DISPLAY_TYPE {
    DISPLAY_TYPE_PRIMARY,
    DISPLAY_TYPE_SECONDARY,
    DISPLAY_TYPE_VIRTUAL,
    DISPLAY_TYPE_REMOTE,
    DISPLAY_TYPE_HEADLESS,
    DISPLAY_TYPE_HOLOGRAPHIC,
    DISPLAY_TYPE_PROJECTED
} DISPLAY_TYPE, *PDISPLAY_TYPE;

// Display states
typedef enum _DISPLAY_STATE {
    DISPLAY_STATE_ACTIVE,
    DISPLAY_STATE_STANDBY,
    DISPLAY_STATE_SUSPENDED,
    DISPLAY_STATE_OFF,
    DISPLAY_STATE_ERROR
} DISPLAY_STATE, *PDISPLAY_STATE;

// Input device types
typedef enum _INPUT_DEVICE_TYPE {
    INPUT_DEVICE_KEYBOARD,
    INPUT_DEVICE_MOUSE,
    INPUT_DEVICE_TOUCH,
    INPUT_DEVICE_PEN,
    INPUT_DEVICE_VOICE,
    INPUT_DEVICE_GESTURE,
    INPUT_DEVICE_EYE_TRACKING,
    INPUT_DEVICE_BRAIN_INTERFACE
} INPUT_DEVICE_TYPE, *PINPUT_DEVICE_TYPE;

// Input device states
typedef enum _INPUT_DEVICE_STATE {
    INPUT_DEVICE_STATE_ACTIVE,
    INPUT_DEVICE_STATE_STANDBY,
    INPUT_DEVICE_STATE_SUSPENDED,
    INPUT_DEVICE_STATE_ERROR,
    INPUT_DEVICE_STATE_DISCONNECTED
} INPUT_DEVICE_STATE, *PINPUT_DEVICE_STATE;

// UI manager states
typedef enum _UI_MANAGER_STATE {
    UI_MANAGER_INITIALIZING,
    UI_MANAGER_RUNNING,
    UI_MANAGER_PAUSED,
    UI_MANAGER_STOPPING,
    UI_MANAGER_ERROR
} UI_MANAGER_STATE, *PUI_MANAGER_STATE;

// Theme states
typedef enum _THEME_STATE {
    THEME_STATE_CREATED,
    THEME_STATE_ACTIVE,
    THEME_STATE_INACTIVE,
    THEME_STATE_LOADING,
    THEME_STATE_ERROR
} THEME_STATE, *PTHEME_STATE;

// Window styles
#define WS_BORDER            0x00000001
#define WS_CAPTION           0x00000002
#define WS_CHILD             0x00000004
#define WS_CLIPCHILDREN      0x00000008
#define WS_CLIPSIBLINGS      0x00000010
#define WS_DISABLED          0x00000020
#define WS_DLGFRAME          0x00000040
#define WS_GROUP             0x00000080
#define WS_HSCROLL           0x00000100
#define WS_ICONIC            0x00000200
#define WS_MAXIMIZE          0x00000400
#define WS_MAXIMIZEBOX       0x00000800
#define WS_MINIMIZE          0x00001000
#define WS_MINIMIZEBOX       0x00002000
#define WS_OVERLAPPED        0x00004000
#define WS_POPUP             0x00008000
#define WS_SYSMENU           0x00010000
#define WS_TABSTOP           0x00020000
#define WS_THICKFRAME        0x00040000
#define WS_TILED             0x00004000
#define WS_VISIBLE           0x00080000
#define WS_VSCROLL           0x00100000

// Extended window styles
#define WS_EX_ACCEPTFILES    0x00000001
#define WS_EX_APPWINDOW      0x00000002
#define WS_EX_CLIENTEDGE     0x00000004
#define WS_EX_COMPOSITED     0x00000008
#define WS_EX_CONTEXTHELP    0x00000010
#define WS_EX_CONTROLPARENT  0x00000020
#define WS_EX_DLGMODALFRAME  0x00000040
#define WS_EX_LAYERED        0x00000080
#define WS_EX_LAYOUTRTL      0x00000100
#define WS_EX_LEFT           0x00000000
#define WS_EX_LEFTSCROLLBAR  0x00000200
#define WS_EX_LTRREADING     0x00000000
#define WS_EX_MDICHILD       0x00000400
#define WS_EX_NOACTIVATE     0x00000800
#define WS_EX_NOINHERITLAYOUT 0x00001000
#define WS_EX_NOPARENTNOTIFY 0x00002000
#define WS_EX_OVERLAPPEDWINDOW 0x00000300
#define WS_EX_PALETTEWINDOW  0x00000180
#define WS_EX_RIGHT          0x00001000
#define WS_EX_RIGHTSCROLLBAR 0x00000000
#define WS_EX_RTLREADING     0x00002000
#define WS_EX_STATICEDGE     0x00020000
#define WS_EX_TOOLWINDOW     0x00000080
#define WS_EX_TOPMOST        0x00000008
#define WS_EX_TRANSPARENT    0x00000020
#define WS_EX_WINDOWEDGE     0x00000100

// Control styles
#define CS_ALIGN_LEFT        0x00000001
#define CS_ALIGN_CENTER      0x00000002
#define CS_ALIGN_RIGHT       0x00000004
#define CS_ALIGN_TOP         0x00000010
#define CS_ALIGN_VCENTER     0x00000020
#define CS_ALIGN_BOTTOM      0x00000040
#define CS_MULTILINE         0x00000100
#define CS_PASSWORD          0x00000200
#define CS_READONLY          0x00000400
#define CS_WRAP              0x00000800
#define CS_NOTIFY            0x00001000
#define CS_DEFAULT           0x00002000
#define CS_CANCEL            0x00004000

// Layout types
typedef enum _LAYOUT_TYPE {
    LAYOUT_TYPE_ABSOLUTE,
    LAYOUT_TYPE_RELATIVE,
    LAYOUT_TYPE_GRID,
    LAYOUT_TYPE_FLOW,
    LAYOUT_TYPE_STACK,
    LAYOUT_TYPE_DOCK,
    LAYOUT_TYPE_TABLE,
    LAYOUT_TYPE_CUSTOM
} LAYOUT_TYPE, *PLAYOUT_TYPE;

// Layout strategies
typedef enum _LAYOUT_STRATEGY {
    LAYOUT_STRATEGY_SEQUENTIAL,
    LAYOUT_STRATEGY_PARALLEL,
    LAYOUT_STRATEGY_PRIORITY,
    LAYOUT_STRATEGY_WEIGHTED,
    LAYOUT_STRATEGY_ADAPTIVE,
    LAYOUT_STRATEGY_RESPONSIVE
} LAYOUT_STRATEGY, *PLAYOUT_STRATEGY;

// Animation types
typedef enum _ANIMATION_TYPE {
    ANIMATION_TYPE_NONE,
    ANIMATION_TYPE_FADE,
    ANIMATION_TYPE_SLIDE,
    ANIMATION_TYPE_SCALE,
    ANIMATION_TYPE_ROTATE,
    ANIMATION_TYPE_MORPH,
    ANIMATION_TYPE_BOUNCE,
    ANIMATION_TYPE_ELASTIC,
    ANIMATION_TYPE_CUSTOM
} ANIMATION_TYPE, *PANIMATION_TYPE;

// Cursor types
typedef enum _CURSOR_TYPE {
    CURSOR_TYPE_ARROW,
    CURSOR_TYPE_IBEAM,
    CURSOR_TYPE_WAIT,
    CURSOR_TYPE_CROSS,
    CURSOR_TYPE_UPARROW,
    CURSOR_TYPE_SIZE,
    CURSOR_TYPE_ICON,
    CURSOR_TYPE_SIZENWSE,
    CURSOR_TYPE_SIZENESW,
    CURSOR_TYPE_SIZEWE,
    CURSOR_TYPE_SIZENS,
    CURSOR_TYPE_SIZEALL,
    CURSOR_TYPE_NO,
    CURSOR_TYPE_HAND,
    CURSOR_TYPE_HELP,
    CURSOR_TYPE_APPSTARTING,
    CURSOR_TYPE_CUSTOM
} CURSOR_TYPE, *PCURSOR_TYPE;

// Message types
typedef enum _MESSAGE_TYPE {
    MESSAGE_NULL,
    MESSAGE_CREATE,
    MESSAGE_DESTROY,
    MESSAGE_SHOW,
    MESSAGE_HIDE,
    MOVE_MESSAGE,
    MESSAGE_SIZE,
    MESSAGE_ACTIVATE,
    MESSAGE_SETFOCUS,
    MESSAGE_KILLFOCUS,
    MESSAGE_ENABLE,
    MESSAGE_DISABLE,
    MESSAGE_PAINT,
    MESSAGE_CLOSE,
    MESSAGE_QUIT,
    MESSAGE_KEYDOWN,
    MESSAGE_KEYUP,
    MESSAGE_CHAR,
    MESSAGE_MOUSEMOVE,
    MESSAGE_MOUSEDOWN,
    MESSAGE_MOUSEUP,
    MESSAGE_MOUSEWHEEL,
    MESSAGE_TOUCH,
    MESSAGE_GESTURE,
    MESSAGE_INPUT,
    MESSAGE_COMMAND,
    MESSAGE_NOTIFY,
    MESSAGE_TIMER,
    MESSAGE_CUSTOM
} MESSAGE_TYPE, *PMESSAGE_TYPE;

// Input event types
typedef enum _INPUT_EVENT_TYPE {
    INPUT_EVENT_NONE,
    INPUT_EVENT_KEYDOWN,
    INPUT_EVENT_KEYUP,
    INPUT_EVENT_CHAR,
    INPUT_EVENT_MOUSEMOVE,
    INPUT_EVENT_MOUSEDOWN,
    INPUT_EVENT_MOUSEUP,
    INPUT_EVENT_MOUSEWHEEL,
    INPUT_EVENT_TOUCH_DOWN,
    INPUT_EVENT_TOUCH_UP,
    INPUT_EVENT_TOUCH_MOVE,
    INPUT_EVENT_GESTURE_START,
    INPUT_EVENT_GESTURE_END,
    INPUT_EVENT_GESTURE_UPDATE,
    INPUT_EVENT_VOICE_COMMAND,
    INPUT_EVENT_EYE_GAZE,
    INPUT_EVENT_BRAIN_SIGNAL
} INPUT_EVENT_TYPE, *PINPUT_EVENT_TYPE;

// Basic UI structures
typedef struct _UI_COLOR {
    UCHAR Red;
    UCHAR Green;
    UCHAR Blue;
    UCHAR Alpha;
} UI_COLOR, *PUI_COLOR;

typedef struct _UI_POINT {
    LONG X;
    LONG Y;
} UI_POINT, *PUI_POINT;

typedef struct _UI_SIZE {
    LONG Width;
    LONG Height;
} UI_SIZE, *PUI_SIZE;

typedef struct _UI_RECT {
    LONG Left;
    LONG Top;
    LONG Right;
    LONG Bottom;
} UI_RECT, *PUI_RECT;

typedef struct _UI_FONT {
    UNICODE_STRING FontFamily;
    ULONG Size;
    ULONG Weight;
    BOOLEAN Italic;
    BOOLEAN Underline;
    BOOLEAN Strikeout;
    UI_COLOR Color;
} UI_FONT, *PUI_FONT;

// UI statistics
typedef struct _UI_STATS {
    ULONG TotalWindows;
    ULONG VisibleWindows;
    ULONG TotalControls;
    ULONG ActiveControls;
    ULONG InputDevices;
    ULONG Displays;
    ULONG Themes;
    UI_MODE CurrentMode;
    UI_PERFORMANCE_METRICS Performance;
} UI_STATS, *PUI_STATS;

// Function prototypes

// UI system initialization
NTSTATUS
NTAPI
UiInitializeCompositeInterface(VOID);

// Window management
NTSTATUS
NTAPI
UiCreateWindow(
    _In_ PCWSTR WindowTitle,
    _In_ WINDOW_TYPE WindowType,
    _In_ UI_RECT Bounds,
    _In_ ULONG Style,
    _Out_ PWINDOW_ID WindowId
);

NTSTATUS
NTAPI
UiShowWindow(
    _In_ WINDOW_ID WindowId
);

NTSTATUS
NTAPI
UiHideWindow(
    _In_ WINDOW_ID WindowId
);

NTSTATUS
NTAPI
UiDestroyWindow(
    _In_ WINDOW_ID WindowId
);

PUI_WINDOW
NTAPI
UiFindWindowById(
    _In_ WINDOW_ID WindowId
);

// Control management
NTSTATUS
NTAPI
UiCreateControl(
    _In_ WINDOW_ID WindowId,
    _In_ CONTROL_TYPE ControlType,
    _In_ PCWSTR ControlName,
    _In_ UI_RECT Bounds,
    _Out_ PCONTROL_ID ControlId
);

NTSTATUS
NTAPI
UiDestroyControl(
    _In_ CONTROL_ID ControlId
);

PUI_CONTROL
NTAPI
UiFindControlById(
    _In_ CONTROL_ID ControlId
);

// UI mode management
NTSTATUS
NTAPI
UiSetUiMode(
    _In_ UI_MODE Mode
);

UI_MODE
NTAPI
UiGetUiMode(VOID);

// Event loop
NTSTATUS
NTAPI
UiRunEventLoop(VOID);

// Statistics
NTSTATUS
NTAPI
UiGetUiStatistics(
    _Out_ PUI_STATS Stats
);

// Status
BOOLEAN
NTAPI
UiIsCompositeUiInitialized(VOID);

#endif // _COMPOSITE_UI_H_